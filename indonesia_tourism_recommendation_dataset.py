# -*- coding: utf-8 -*-
"""Indonesia Tourism Recommendation Dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hEQMIYHX_sdKoMf9waUEMzn7WCtT6q-b

# Data Understanding

## Data Loading
"""

!pip install -q kaggle
!pip install scikit-learn

import zipfile, os
import split_folder
import numpy as np
import itertools
import cv2
import matplotlib.pyplot as plt
import pandas as pd
from pathlib import Path

import tensorflow as tf
from tensorflow import keras
from sklearn.model_selection import train_test_split

from sklearn.neighbors import NearestNeighbors
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics import precision_score, recall_score, f1_score

from google.colab import files
files.upload()
!rm -r ~/.kaggle
!mkdir ~/.kaggle
!mv ./kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!kaggle datasets download -d aprabowo/indonesia-tourism-destination

zip_ref = zipfile.ZipFile('indonesia-tourism-destination.zip', 'r')
zip_ref.extractall('/content')
zip_ref.close()

rating = pd.read_csv('/content/tourism_rating.csv')
id = pd.read_csv('/content/tourism_with_id.csv')[['Place_Id',	'Place_Name',	'Description',	'Category',	'City',	'Price',	'Rating',	'Time_Minutes',	'Coordinate',	'Lat',	'Long']]
user = pd.read_csv('/content/user.csv')

"""## Univariate Exploratory Data Analysis

"""

rating.head()

rating.info()

id.head()

id.info()

user.head()

user.info

"""## Visualisasi Data"""

tourism_all = np.concatenate((
    id.Place_Id.unique(),
    rating.Place_Id.unique()
))

tourism_all = np.sort(np.unique(tourism_all))
len(tourism_all)

all_tourism_rate = rating
all_tourism_rate

all_tourism = pd.merge(all_tourism_rate, id[['Place_Id',	'Place_Name', 'City','Category']], on='Place_Id', how='left')
all_tourism

category_counts = all_tourism['Category'].value_counts()

plt.figure(figsize=(10, 6))
category_counts.plot(kind='bar', color='skyblue')
plt.title('Jumlah Setiap Category')
plt.xlabel('Category')
plt.ylabel('Count')
plt.xticks(rotation=45, ha='right')
plt.show()

city_counts = all_tourism['City'].value_counts()

plt.figure(figsize=(10, 6))
city_counts.plot(kind='bar', color='salmon')
plt.title('Jumlah setiap city')
plt.xlabel('City')
plt.ylabel('Count')
plt.xticks(rotation=45, ha='right')
plt.show()

rating_counts = all_tourism['Place_Ratings'].value_counts().sort_index()

plt.figure(figsize=(8, 5))
rating_counts.plot(kind='bar', color='lightgreen')
plt.title('Jumlah setiap Rating')
plt.xlabel('Rating')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.show()

"""# Data Preparation

## Missing Value
"""

all_tourism.isnull().sum()

"""## Duplicate"""

df_tourism = all_tourism.drop_duplicates('Place_Id')
df_tourism

"""## Konversi Menjadi list"""

user_id = df_tourism['User_Id'].tolist()
place_id = df_tourism['Place_Id'].tolist()
place_ratings = df_tourism['Place_Ratings'].tolist()
place_name = df_tourism['Place_Name'].tolist()
city = df_tourism['City'].tolist()
category = df_tourism['Category'].tolist()

df = pd.DataFrame({
    'user_id': user_id,
    'place_id': place_id,
    'place_ratings': place_ratings,
    'place_name': place_name,
    'city': city,
    'category': category
})
df

"""# Modeling and Result (Content Based Filtering)

TF-IDF Vectorizer
"""

tf = TfidfVectorizer()

tf.fit(df['category'])

tf.get_feature_names_out()

tfidf_matrix = tf.fit_transform(df['category'])

tfidf_matrix.shape

tfidf_matrix.todense()

pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names_out(),
    index=df.place_name
).sample(10, axis=1).sample(10, axis=0)

"""## Cosine Similarity"""

cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

cosine_sim_df = pd.DataFrame(cosine_sim, index=df['place_name'], columns=df['place_name'])
print('Shape:', cosine_sim_df.shape)

cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

"""## Recommendation"""

def tourism_recommendations(place_name,similarity_data=cosine_sim_df,items=df[['place_name','category', 'city']],k=5):
    index = similarity_data.loc[:,place_name].to_numpy().argpartition(range(-1,-k,-1))

    closest = similarity_data.columns[index[-1:-(k+2):-1]]

    closest = closest.drop(place_name,errors='ignore')

    return pd.DataFrame(closest).merge(items).head(k)

tourism_recommendations("Candi Sewu")

tourism_recommendations("NuArt Sculpture Park")

"""# Evaluation"""

def evaluate_cosine_similarity_matrix(similarity_matrix, threshold=0.5):
    binary_matrix = (similarity_matrix > threshold).astype(int)

    num_items = similarity_matrix.shape[0]

    precision_scores = np.zeros(num_items)
    recall_scores = np.zeros(num_items)
    f1_scores = np.zeros(num_items)

    for i in range(num_items):
        true_values = binary_matrix[i, :]
        predicted_values = binary_matrix[:, i]
        precision_scores[i] = precision_score(true_values, predicted_values)
        recall_scores[i] = recall_score(true_values, predicted_values)
        f1_scores[i] = f1_score(true_values, predicted_values)

    evaluation_df = pd.DataFrame({
        'Precision': precision_scores,
        'Recall': recall_scores,
        'F1-Score': f1_scores
    })

    return evaluation_df

evaluation_matrix = evaluate_cosine_similarity_matrix(cosine_sim, threshold=0.5)
print("Evaluation Matrix:")
print(evaluation_matrix)